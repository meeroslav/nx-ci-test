name: test-for-ci

on:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
      yarn-version:
        required: false
        type: string
      npm-version:
        required: false
        type: string
      pnpm-version:
        required: false
        type: string

jobs:
  main:
    runs-on: ubuntu-latest
    name: Run
    steps:
      - uses: actions/checkout@v2
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - uses: actions/checkout@v2
        name: Checkout [Default Branch]
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      # Set node/npm/yarn versions using volta, with optional overrides provided by the consumer
      - uses: volta-cli/action@fdf4cf319494429a105efaa71d0e5ec67f338c6e
        with:
          node-version: '${{ inputs.node-version }}'
          npm-version: '${{ inputs.npm-version }}'
          yarn-version: '${{ inputs.yarn-version }}'

      # Install pnpm with exact version provided by consumer or fallback to latest
      - name: Install PNPM
        uses: pnpm/action-setup@v2.2.1
        with:
          version: ${{ inputs.pnpm-version || 'latest' }}

      - name: Print node/npm/yarn versions
        id: versions
        run: |
          node_ver=$( node --version )
          yarn_ver=$( yarn --version || true )
          pnpm_ver=$( pnpm --version || true )

          echo "Node: ${node_ver:1}"
          echo "NPM: $( npm --version )"
          if [[ $yarn_ver != '' ]]; then echo "Yarn: $yarn_ver"; fi
          if [[ $pnpm_ver != '' ]]; then echo "PNPM: $pnpm_ver"; fi

          echo "::set-output name=node_version::${node_ver:1}"
          echo "::set-output name=package_manager::$([[ -f ./yarn.lock ]] && echo "yarn" || ([[ -f ./pnpm-lock.yaml ]] && echo "pnpm") || echo "npm")"

      - name: What PM
        run: |
          echo "Package Manager Used: ${{ steps.versions.outputs.package_manager }}"
          echo "Node version: ${{ steps.versions.outputs.node_version }}"
