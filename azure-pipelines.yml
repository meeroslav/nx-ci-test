name: build

trigger:
  - main
pr:
  - main

variables:
  - name: NX_CLOUD_DISTRIBUTED_EXECUTION
    value: 'true'
  - name: NX_BRANCH
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: $(System.PullRequest.PullRequestNumber)
    ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      value: $(Build.SourceBranchName)
  - name: TARGET_BRANCH
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]
  - name: BASE_SHA
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: $(git merge-base $(TARGET_BRANCH) HEAD)
    ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      value: $(git rev-parse HEAD~1)

jobs:
  - job: agents
    strategy:
      matrix:
        first:
          ordinal: 1
        second:
          ordinal: 2
        third:
          ordinal: 3
    displayName: 'Agent $(ordinal)'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: npm install --prefix=$HOME/.local -g pnpm@6.32.4
        displayName: Install PNPM
      - script: pnpm install --frozen-lockfile
        displayName: NPM Install Dependencies
      - script: pnpm exec nx-cloud start-agent
        displayName: 'Start Nx-Cloud agent $(ordinal)'

  - job: main
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: npm install --prefix=$HOME/.local -g pnpm@6.32.4
        displayName: Install PNPM
      - script: pnpm install --frozen-lockfile
        displayName: NPM Install Dependencies
      - script: pnpm exec nx-cloud start-ci-run
        displayName: Start CI run
      - script: pnpm exec nx workspace-lint
        displayName: Run workspace lint
      - script: pnpm exec nx format:check --base=$(BASE_SHA)
        displayName: Check format
      - script: pnpm exec nx affected --base=$(BASE_SHA) --target=lint --parallel=3
        displayName: Run lint
      - script: pnpm exec nx affected --base=$(BASE_SHA) --target=test --parallel=3 --ci --code-coverage
        displayName: Run test
      - script: pnpm exec nx affected --base=$(BASE_SHA) --target=build --parallel=3
        displayName: Run build
      - script: pnpm exec nx-cloud stop-all-agents
        condition: always()
        displayName: Stop all Nx-Cloud agents
